##1강. 클래스와 데이터

- 클래스란? 현실 세계의 개념을 프로그램에 정의하는 것이다.
- 인스턴스란? 클래스를 사용해서 실제 메모리에 만들어진 실체(by New ~~ ). 메모리에 공간이 할당되어야 쓸 수 있다.
- 객체를 생성하면 자바는 인스턴스의 참조값을 반환한다.
- 자바에서의 대입 : 변수에 들어있는 값을 복사해서 전달한다(상수든 참조값이든).
- Student[] studentArr = new int[1]; Student student1 = new Student();
=> studentArr[0] = student1; //인스턴스 자체가 복사된 것이 아니라! 참조값이 복사된 것이다.

c.f) 객체 vs 인스턴스
=> 실무에서는 사실상 동일한 의미로서 사용된다. 굳이 따지자면..

객체 : 클래스에서 정의한 속성과 기능을 가진 실체.
인스턴스 : 클래스에서 나온 실체(좀 더 관계에 초점을 맞춘 개념). ex) student1은 Student 클래스로부터 생성되었으므로 Student의 인스턴스야.

================================================================================================================

##2강. 기본형과 참조형

- 참조형이랑? 데이터에 접근하기 위한 참조(주소)를 저장하는 데이터 타입. ex) 객체, 배열

c.f) String
=> String은 Java에서 특별하게 편의 기능을 제공하는 클래스(참조형)

- Java는 항상 변수의 값을 복사해서 대입한다!
=> 참조형의 경우, 실제 사용하는 객체가 아니라 객체의 위치를 가리키는 참조값만 복사한다.
- 기본형과 참조형의 메서드 호출 : 메서드 매개변수에 변수의 값을 넣어도 값만 복사되는 것.
=> 기본형 - 해당 값이 복사되어 전달. 메서드 내부에서 매개변수의 값을 변경해도, 호출자의 변수 값에는 영향이 없다.
=> 참조형 - 참조값이 복사되어 전달. 메서도ㅡ 내부에서 매개변수로 전달된 객체의 멤버 변수를 변경하면, 호출자의 객체도 변경된다.

c.f) Garbage Collection
아무도 참조하지 않는 인스턴스가 있으면 JVM의 GC가 더 이상 사용하지 않는 인스턴스라 판단하고,
해당 인스턴스를 자동으로 메모리에서 제거해준다 => 메모리 부족 오류 방지.
How? 해당 객체를 참조하는 곳이 있는지 없는지로 판단.

================================================================================================================

##3강. 객체지향 프로그래밍

- 절차지향 : 프로그램의 흐름을 순차적으로 따르며 처리하는 방식.
- 객체지향 : 실제 세계의 사물이나 사건을 객체로 보고, 객체들 간의 상호작용을 중심으로 프로그래밍하는 방식.
=> 데이터와 기능을 하나로 묶어서 사용
- 인스턴스 생성하면, 인스턴스 내에 멤버변수 & 메서드가 같이 존재하여 메모리에 올라간다.
- 캡슐화 : 속성과 기능을 하나로 묶어서 필요한 기능을 메서드를 통해 외부에 제공하는 것.

================================================================================================================

##4강. 생성자

- 생성자가 필요한 이유 : 메서드 호출로도 인스턴스 생성이 가능하지만 속성과 기능을 한 곳에 두는 것이 더 좋기 때문에(객체지향적 관점),
클래스 자기 자신의 데이터를 변경하는 기능(메서드)를 제공하는 것이 좋다.
- this : 인스턴스 자신의 참조값을 가리킴. 멤버 변수에 접근하려면 앞에 'this.' 붙여주기.
- 객체를 생성할 때 직접 정의한 생성자가 있다면 직접 정의한 생성자를 반드시 호출해야 한다.

================================================================================================================

##5강. 패키지

================================================================================================================

##6강. 접근 제어자
